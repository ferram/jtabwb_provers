package ipl.frj.kripke;

import java.util.HashSet;
import java.util.LinkedList;

import ferram.util.ArrayFormatting;
import ipl.frj.sequent.FrjRegularSequent;
import jtabwbx.prop.formula.Formula;

public class World {

  public World(FrjRegularSequent sequent, HashSet<World> successors, int level) {
    super();
    this.sequent = sequent;
    this.successors = successors;
    this.level = level;
    if (level != 0) {
      this.coneWorlds = new HashSet<World>();
      this.coneWorlds.addAll(successors);
      if (successors != null)
        for (World succ : successors) {
          if (succ.coneWorlds != null)
            this.coneWorlds.addAll(succ.coneWorlds);
        }
    }
    this.hashCode = sequent.getSequentProgessiveNumber();
  }

  private LinkedList<World> predecessors;
  private HashSet<World> successors;
  private HashSet<World> coneWorlds; // contains all the (direct and indirect) successors of this world
  private FrjRegularSequent sequent;
  private int level;
  private int hashCode;

  public LinkedList<Formula> focing() {
    LinkedList<Formula> forcing = new LinkedList<Formula>();
    for (Formula wff : sequent.left())
      if (wff.isAtomic())
        forcing.add(wff);
    return forcing;
  }

  void addPredecessor(World w) {
    if (predecessors == null)
      predecessors = new LinkedList<World>();
    predecessors.add(w);
  }

  public LinkedList<World> predecessors() {
    return predecessors;
  }

  public FrjRegularSequent getSequent() {
    return sequent;
  }

  public HashSet<World> successors() {
    return successors;
  }

  /**
   * Returns the worlds belonging to the cone generated by this world.
   * 
   * @return
   */
  public HashSet<World> coneWorlds() {
    return coneWorlds;
  }

  public int level() {
    return level;
  }

  public int getIdx() {
    return sequent.getSequentProgessiveNumber();
  }

  public String getName() {
    return "(" + sequent.getSequentProgessiveNumber() + ")";
  }

  String toStringSuccessors() {
    String succStr = "";
    int[] succArray = successors == null ? null : new int[successors.size()];
    if (succArray != null) {
      int k = 0;
      for (World w : successors)
        succArray[k++] = w.getIdx();
      succStr = ArrayFormatting.toString(succArray, ", ");
    }
    return "{" + succStr + "}";
  }

  String toStringPredecessors() {
    String predStr = "";
    int[] predArray = predecessors == null ? null : new int[predecessors.size()];
    if (predArray != null) {
      int k = 0;
      for (World w : predecessors)
        predArray[k++] = w.getIdx();
      predStr = ArrayFormatting.toString(predArray, ", ");
    }
    return "{" + predStr + "}";
  }

  @Override
  public int hashCode() {
    return hashCode;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    World other = (World) obj;
    if (this.hashCode != other.hashCode)
      return false;
    return true;
  }

}
