package ipl.frj.launcher;

class MSG {

  final static String TESTSET_INDENTATION = "   ";

  static class LOG {

    static class DEBUG {

      //static final String INITIAL_GOL = "Initial gol:\n%s";

      static final String FRJ_PROVER_INITIAL_STATE = "Prover initial state:\n%s";
    }
  }

  static class OPTIONS {

    static final String HELP = "help";
    static final String VERBOSE = "print details about proof-search";
    static final String LATEX_PROOF =
        "save the LaTeX of the proof generated by a successful proof-search.";
    static final String LATEX_GENERATED = "save the LaTeX of the generated sequents.";

    static final String LOG_DEBUG = "Debug log.";
    static final String LOG_INFO = "Info log.";
    static final String TESTSET = "tesets mode.";
    static final String STDN_INPUT = "read the formula from standard input.";
    static final String PROVER = "Select the prover to use. Available provers (* is default): %s.";
    static final String SEQUENT_DB =
        "Select the sequent DB to use. Available seqeuents DB (* is default): %s.";
    static final String KRIPKE_STAT =
        "build the counter model for goals and print stat about the model.";
    static final String GBU =
        "If proof-search in FRJ fails, a GBU-derivation of the goal is extracted from the FRJ-saturated database.";

  }

  static class OPTIONS_MANAGMENT {

    static class ERRORS {

      static final String INVOCATION_ERROR = "Command line parsing failed: %s";
      static final String INCOMPATIBLE_OPTIONS = "Incompatible options [%s] and [%s]";
      static final String OPTION_WRONG_ARGUMENT = "Wrong argumenti [%s] for option [%s]";

    }

    static class INFO {

      static final String HELP_HEADER = "Laucher for the prover.";
      static final String HELP_FOOTER = "";
    }
  }

  static class PROOF_SEARCH_INFO {

    //
    //      static final String CHECK_PASSED = "PASSED";
    //      static final String CHECK_FAILED = "FAILED";
    //      static final String UNCHECKED = "UNCHECKED";
    static final String INFO_SEPARATOR =
        "****************************************************************";
    static final String STDIN_READER_DETAILS = "** Std-input reader [%s]";
    static final String PROVER_DETAILS = "** Prover [%s]";
    static final String TEST_DETAILS = "** Problem [%s], status [%s], proof-search [%s], test [%s]"; //
    static final String PROBLEM_DETAILS = "** Problem [%s], status [%s]";
    static final String PROOF_SEARCH_DETAILS_LINE_PREFIX = "** %s";
    static final String READER_DETAILS = "** Reader [%s]";
    static final String STAT_STRING =
        "** Generated nodes [%d], restored backtrack-points [%d], restored branch-points [%d]";
    //      static final String TESTSET_EXEC_CONFIG_INFO = "--Reader [%s], Prover [%s]\n";
    //      static final String TESTSET_PROBLEM_INFO = "** [%s], status [%s],";
    static final String TOTAL_TIME_1 = "** Proof time (PS + NSC + PP): (ms) [%d]";
    static final String TOTAL_TIME_2 =
        "** Proof time (PS + NSC + PP): (ms) [%d] (hh:mm:ss + ms) [%s]";
    static final String TIMINGS_DETAILS = "** Timings (ms): PS (proof-search) [%d]," //
        + " NSC (initial node set) [%d], PP (problem parsing) [%d]";
    static final String KRIPKE_STAT = "** Kripke model: problem [%s], worlds [%d], depth [%d]";
  }

  static class GBU_EXECUTION {

    static final String STARTING_GBU = "> Starting gbu proof search using frj-saturated DB";
  }

  static class LAUNCHER {

    static class ERROR {

      static final String IO_EXCEPTION = "IO EXCEPTION... %s";
      static final String INITIAL_NODE_BUILDER_ERROR = "PROBLEM BUILDING NODE SET - %s";

      static final String NO_INPUT_IS_SPECIFIED = "No input specified!!";
      static final String NO_SUCH_FILE = "No such file: %s";

      static final String PROBLEM_WRONG_FORMAT = "PROBLEM DESCRIPTION - wrong format: %s";

      static final String LOG_DIR_CANNOT_BE_CREATED = "Log directory [%s] cannot be created: %s";
      static final String LOG_DIR_IS_NOT_A_DIR = "Log selected directory [%s] is not a directory.";
      static final String LOG_FILE_CANNOT_BE_GENERATED = "Log file cannot be generated.";

      static final String TESTSET_FILE_CANNOT_BE_CREATED =
          "Testset log file [%s] cannot be created: %s";
      static final String TESTSET_TMP_FILE_CANNOT_BE_CREATEd =
          "Testset temporary file cannot be created: %s";

      static final String LATEX_CANNOT_BE_GENERATED = "LaTeX cannot be generater: %s";

    }

    static class INFO {

      static final String PROBLEM_DESCRIPTION_PARSING_BEGIN = "> Parsing [%s]...";
      static final String PROBLEM_DESCRIPTION_PARSING_END = " time (ms) [%d]";

      static final String PROVING_BEGIN = "> Proving...";
      static final String PROVING_END = " time (ms) [%d]";
      static final String PROVING_END_VERBOSE = "> Proof search time (ms) [%d]";

      static final String INITIAL_NODE_SET_BUILDING_BEGIN = "> Building initial node set...";
      static final String INITIAL_NODE_SET_BUILDING_END = " time (ms) [%d]";

      static final String INFO_SEPARATOR =
          "****************************************************************";
      static final String STDIN_INPUT_TYPE_A_FORMULA = "> Type a formula:";
    }

    static class TESTSET_INFO {

      static final String TESTSET_PROBLEM_INFO = "** [%s], status [%s],";

      static final String PROBLEM_1 = "** [%s]";

      static final String SINGLE_OUTPUT_RESULT = TESTSET_INDENTATION
          + "status [%s], proof-search [%s], test [%s] %s\n" //
          + TESTSET_INDENTATION //
          + "Iterations [%d], generated sequents [%d], proved sequents [%d]\n" + TESTSET_INDENTATION //
          + "Times (sec.): total [%s], proof-search [%s], initial node set construction [%s], problem parsing [%s]"; //
      //
      static final String PROBLEMS_PREAMBLE = "** Single problems report, columns description:\n" // 
          + "**   test: problem, status, proof-search result, test result;\n"
          + "**   times (ms): proof-time (PS + NSC), PS (proof-search), NSC (initial node set construction), PP (problem parsing);\n" //
          + "**   details: iterations, generated nodes, max stack size, visited branches, failed branches;\n" //
          + "**   problem source file";
      //      static final String TESTSET_LOGFILE_RESULT =
      //          "test: %s, %s, %s, %s; times (ms): %d, %d, %d, %d; details: %d; %d; %d; %d; %d; %s";
      static final String TESTSET_PROVER_NAME = "** Prover: frj";
      //      static final String TESTSET_LOGFILE_TESTSETNAME = "** Testset: %s";
      static final String TESTSET_PROBLEMS =
          "** Problems: total [%d], provable [%d], unprovable [%d], unknown status [%d]";
      static final String TESTSET_TEST =
          "** Test report: failed [%d], successful [%d], unchecked [%d]";
      static final String TIMINGS_DETAILS = "** Total timings (sec): PS (proof-search) [%s]," //
          + " NSC (initial node set) [%s], PP (problem parsing) [%s]";
      static final String TESTSET_PROOF_TIME_1 = "** Total proof time (PS + NSC) (sec): [%s]";
      static final String TESTSET_PROOF_TIME_2 =
          "** Total proof time (PS + NSC) (sec): [%s] (hh:mm:ss + ms) [%s]";
      static final String TESTSET_TOTAL_TIME_1 = "** Total proof time (PS + NSC + PP) (sec): [%s]";
      static final String TESTSET_TOTAL_TIME_2 =
          "** Total proof time (PS + NSC + PP) (sec): [%s] (hh:mm:ss + ms) [%s]";
      static final String TESTSET_LOGFILE_SEPARATOR =
          "****************************************************************";
      static final String TESTSET_LOGFILE_ROW_SEPARATOR =
          "** --------------------------------------------------------------";
      static final String TESTSET_LOGFILE_CANNOT_BE_OPENED =
          "Testset temporary file cannot be opened: %s";
      //      static final String TESTSET_PROVER = "** Prover [%s]";
    }

    static class TIME_STR {

      //static final String JTABWB_TEST_STRING = "%s: %s, %s, %s; times (seconds): %s, %s, %s, %s";
      static final String JTABWB_DETAILS_STRING_LEGENDA =
          "problem name; problem status; proof search result; test result; total proof-time; proof-search time; initial node set construction; problem parsing time; generated nodes; resumed backtrack points; resumed branch points";
      static final String JTABWB_DETAILS_STRING = "%s; %s; %s; %s; %s; %s; %s; %s; %d; %d; %d";
      static final String JTABWB_TIME_STRING = "%d.%03d";
      static final String F3_TIME_STRING = "%d.%03d seconds";
    }
  }

}
